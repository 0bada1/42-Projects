ALGORITHM DECIDING WHAT LINE TO DRAW

	// if (point1.posx == point2.posx)
	// {
	// 	printf("This is m = infinite\n");
	// 	draw_vert_line(point2.posy - point1.posy, x, y, img);
	// 	return;
	// }
	// m = ((point2.posy - point1.posy) / (point2.posx - point1.posx) * 1.0);
	// if (m == 0)
	// {
	// 	printf("This line is horizontal\n");
	// 	draw_hor_line(point2.posx - point1.posx, x, y, img);
	// }
	// if (m < 1 && m > 0)
	// 	algorithm_m_less_than_1_and_greater_than_0(Pk, point1, point2, img);
	// if (m >= 1)
	// 	algorithm_m_greater_than_or_equal_to_1(Pk, point1, point2, img);
	// if (m < 0 && m > -1)
	// 	algorithm_m_less_than_0_and_greater_than_minus1(Pk, point1, point2, img);
	// if (m <= -1)
	// 	algorithm_m_less_than_or_equal_to_minus1(Pk, point1, point2, img);


	void	draw_graph(t_position **points, t_data *img)
{
	t_position	current_point;
	int	x;
	int	y;

	x = 0;
	y = 0;
	current_point.posx = points[x][y].posx;
	current_point.posy = points[x][y].posy;
	while (y < img->rows)
	{
		x = 0;
		current_point = points[y][x];
		while (x < img->cols)
		{
			// printf("x = %i\n", x);
			// printf("y = %i\n", y);
			if (x + 1 < img->cols && x + 1 != img->cols)
			{
				printf("point (%i,%i) to point (%i,%i)\n", x, y, x + 1, y);
				algorithm(current_point, points[y][x + 1], img);
			}
			else
				printf("end of row\n");
			if (y + 1 < img->rows && y + 1 != img->rows)
			{
				printf("point (%i,%i) to point (%i,%i)\n", x, y, x, y + 1);
				algorithm(current_point, points[y + 1][x], img);
			}
			else
				printf("end of column\n");
			// algorithm(points[x][y], points[x + 1][y + 1], img);
			// my_mlx_pixel_put(img, points[x][y].posx, points[x][y].posy, points[x][y].color);
			current_point = points[y][x];
			x++;
		}
		y++;
	}
}


			// else
				// printf("end of column\n");
			// algorithm(points[x][y], points[x + 1][y + 1], img);
			// my_mlx_pixel_put(img, points[x][y].posx, points[x][y].posy, points[x][y].color);
			// printf("point (%i,%i) to point (%i,%i)\n", current_point.posx, current_point.posy, points[y + 1][x].posx, points[y + 1][x].posy);
	// printf("Point1.posx = %i\nPoint1.posy = %i\nPoint2.posx = %i\nPoint2.posy = %i\nm = %f\n", point1.posx, point1.posy, point2.posx, point2.posy, m);

				// printf("point (%i,%i) to point (%i,%i)\n", current_point.posx, current_point.posy, points[y][x + 1].posx, points[y][x + 1].posy);

REMOVE USELESS FUNCTIONS













PARSING __FILE__

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parsing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ooutabac <ooutabac@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/09/01 19:41:23 by ooutabac          #+#    #+#             */
/*   Updated: 2022/10/09 21:38:32 by ooutabac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"

/* *********PARSING***********
Current line uses get_next_line to read through the fdf file and 
*/
// REPLACE PRINTF WITH FT_PRINTF
t_position	**parse(int fd, t_data *data)
{
	char	*current_line;
	char	**char_fdf_list;
	char 	**row;
	int		i;
	int		j;

	i = 0;
	j = 0;
	current_line = get_next_line(fd);
	if (!current_line)
		return (0);
	char_fdf_list = ft_calloc(sizeof(char*), find_line_size(fd));
	while (current_line != NULL)
	{
		char_fdf_list[i] = current_line;
		current_line = get_next_line(fd);
		i++;
		if (i > 10000)
		{
			printf("FILE TOO LARGE\n");
			exit(1);
		}
	}
	data->rows = i;
	char_fdf_list[i] = NULL;
	t_position **points = ft_calloc(sizeof(t_position *), data->rows + 1);
	i = 0;
	row = ft_split(char_fdf_list[i], ' ');
	data->cols = num_of_cols(row);
	// constant = img_to_screen_ratio(data);
	while (char_fdf_list[i])
	{
		row = ft_split(char_fdf_list[i], ' ');
		// printf("row = %s", *row);
		points[i] = ft_calloc(sizeof(t_position), num_of_cols(row) + 1);
		j = 0;
		while (row[j])
		{
			points[i][j].posy = i;
			points[i][j].posx = j;
			points[i][j].posz = ft_atoi(row[j]);
			if (ft_strnstr(row[j], "0x", 8) != NULL)
			{
				points[i][j].color = ft_atoh(get_hex(row[j]));
				printf("%li\n", points[i][j].color);
			}
			else
				points[i][j].color = 0xFFFFFF;
			// printf("%i  ", points[i][j].posz);
			// printf("y = %d\n", points[i][j].posx);
			// printf("x = %d\n", points[i][j].posy);
			// printf("z = %d\n", points[i][j].posz);
			j++;
		}
		// printf("\n");
		i++;
	}
	// free_everything(char_fdf_list, current_line, row );
	data->original_points = points;
	return (points);
}

int	num_of_cols(char **str)
{
	int	j;

	j = 0;
	while (str[j])
		j++;
	return (j);
}

int	find_line_size(int fd)
{
	int		fd2;
	int		size;
	char	*string;

	fd2 = fd;
	string = get_next_line(fd2);
	size = ft_strlen(string);
	return (size);
}

t_position	**resize_points(t_position **points, t_data *img)
{
	t_position	**resized_points;
	int	x;
	int y;

	resized_points = points;
	x = 0;
	y = 0;
	if (!points)
		return (NULL);
	while (y < img->rows && img->size >= 0)
	{
		x = 0;
		while (x < img->cols && points && img->size >= 0)
		{
			resized_points[y][x].posx *= img->size;
			resized_points[y][x].posy *= img->size;
			resized_points[y][x].posz *= img->size;
			x++;
		}
		y++;
	}
	return (resized_points);
}

t_position	**revert_minus(t_position **points, t_data *img)
{
	t_position	**resized_points;
	int	x;
	int y;

	resized_points = points;
	x = 0;
	y = 0;
	if (!points)
		return (NULL);
	while (y < img->rows && img->size >= 0)
	{
		x = 0;
		while (x < img->cols && points && img->size >= 0)
		{
			resized_points[y][x].posx /= (img->size);
			resized_points[y][x].posy /= (img->size);
			resized_points[y][x].posz /= (img->size);
			x++;
		}
		y++;
	}
	return (resized_points);
}

t_position	**revert_plus(t_position **points, t_data *img)
{
	t_position	**resized_points;
	int	x;
	int y;

	resized_points = points;
	x = 0;
	y = 0;
	if (img->size <= 0)
		img->size++;
	if (!points)
		return (NULL);
	while (y < img->rows)
	{
		x = 0;
		while (x < img->cols && points)
		{
			resized_points[y][x].posx /= (img->size);
			resized_points[y][x].posy /= (img->size);
			resized_points[y][x].posz /= (img->size);
			x++;
		}
		y++;
	}
	return (resized_points);
}

// int	num_of_rows(char *str)
// {
// 	int	i;
// 	// int	counter;

// 	i = 0;
// 	// counter = 0;
// 	while (str[i])
// 	{
// 		// if (str[i] == '\n')
// 		// 	counter++;
// 		i++;
// 	}
// 	return (i);
// }

// int	main(void)
// {
// 	int fd = open("test_maps/42.fdf", O_RDONLY);
// 	t_position **points = parse(fd);
// 	printf("%i\n", points[2][2].posz);
// }

// void draw_graph(int rows, int columns, int size_between_each_pixel, t_data *img)
// {
// 	int	x;
// 	int	y;
// 	int	max_x;
// 	int	max_y;

// 	max_x = 1920;
// 	max_y = 1080;
// 	y = find_center_point_y(1080 - 1) - columns;
// 	while (y < max_y)
// 	{
// 		x = find_center_point_x(1920 - 1) - rows;
// 		while (x < max_x)
// 		{
// 			draw_hor_line(size_between_each_pixel, x, y, img);
// 			x += size_between_each_pixel;
// 			if (x > max_x)
// 				break;
// 		}
// 		y += size_between_each_pixel;
// 	}
// 	x = find_center_point_x(1920 - 1) - rows;
// 	while (x < max_x)
// 	{
// 		y = find_center_point_y(1080 - 1) - columns;
// 		while (y < max_y)
// 		{
// 			draw_vert_line(size_between_each_pixel, x, y, img);
// 			y += size_between_each_pixel;
// 			if (y > max_y)
// 				break;
// 		}
// 		printf("\nhello\n");
// 		x += size_between_each_pixel;
// 	}
// }

// ------DRAW POINTS ONLY-------
// void	draw_graph(t_position **points, t_data *img)
// {
// 	int	x;
// 	int	y;

// 	x = 0;
// 	y = 0;
// 	while (y < img->cols)
// 	{
// 		x = 0;
// 		while (x < img->rows)
// 		{
// 			// algorithm(points[x][y], points[x + 1][y + 1], img);
// 			my_mlx_pixel_put(img, points[x][y].posx, points[x][y].posy, points[x][y].color);
// 			x++;
// 		}
// 		y++;
// 	}
// }

// void	draw_graph(t_position **points, t_data *img)
// {
// 	int	x;
// 	int	y;

// 	x = 0;
// 	y = 0;
// 	printf("drawing rows\n");
// 	draw_graph_rows(points, img);
// 	printf("drawing cols\n");
// 	draw_graph_cols(points, img);
// 	// draw_graph_all_except_last_column(x, points, current_point, img);
// 	// draw_graph_last_column(points, img);
// }

// void	draw_graph_all_except_last_column(int x, t_position **points, t_position current_point, t_data *img)
// {
// 	int	y;

// 	y = 0;
// 	while (y < img->rows)
// 	{
// 		x = 0;
// 		current_point.posy = points[y][x].posy;
// 		current_point.posx = points[y][x].posx;
// 		while (x + 1 < img->cols)
// 		{
// 			if (x + 1 < img->cols || x == img->cols)
// 				algorithm(current_point, points[y][x + 1], img);
// 			if (y + 1 < img->rows || y == img->rows)
// 				algorithm(current_point, points[y + 1][x], img);
// 			if (x == img->cols)
// 				algorithm(current_point, points[y + 1][x], img);
// 			x++;
// 			if (x + 1 < img->cols)
// 			{
// 				current_point.posx = points[y][x].posx;
// 				current_point.posy = points[y][x].posy;
// 			}
// 		}
// 		y++;
// 	}
// }

// void	draw_graph_last_column(t_position **points, t_data *img)
// {
// 	t_position	current_point;
// 	int			x;
// 	int			y;

// 	y = 0;
// 	x = img->cols - 1;
// 	current_point = points[y][x];
// 	while (y < img->rows)
// 	{
// 		if (y + 1 < img->rows || y == img->rows)
// 		{
// 			// printf("point (%i,%i) to point (%i,%i)\n", current_point.posx, current_point.posy, points[y + 1][x].posx, points[y + 1][x].posy);
// 			algorithm(current_point, points[y + 1][img->cols - 1], img);
// 		}
// 		y++;
// 	}
// }

// void	draw_graph(t_position **points, t_data *img)
// {
// 	int	x;
// 	int	y;

// 	x = 0;
// 	y = 0;
// 	while (x < img->cols)
// 	{
// 		if (x + 1 != img->cols)
// 			algorithm(points[y][x], points[y][x + 1], img);
// 		else
// 		{
// 			y++;
// 			x = 0;
// 		}
// 		x++;
// 		if (y + 1 == img->rows)
// 			break ;
// 	}
// 	x = 0;
// 	y = 0;
// 	while (y < img->rows)
// 	{
// 		if (y + 1 != img->rows)
// 			algorithm(points[y][x], points[y + 1][x], img);
// 		else
// 		{
// 			x++;
// 			y = 0;
// 		}
// 		y++;
// 		if (x + 1 == img->cols)
// 			break ;
// 	}
// }

void	draw_graph_rows(t_position **points, t_data *img)
{
	t_position	current_point;
	int	x;
	int	y;

	x = 0;
	y = 0;
	current_point = points[y][x];
	while (x < img->cols && y < img->rows)
	{
		current_point = points[y][x];
		if (x < img->cols)
		{
			algorithm(current_point, points[y][x + 1], img);
			x++;
		}
		if (x + 1 >= img->cols)
		{
			x = 0;
			y++;
		}
	}
}

void	draw_graph_cols(t_position **points, t_data *img)
{
	t_position	current_point;
	int	x;
	int	y;

	x = 0;
	y = 0;
	current_point = points[y][x];
	while (y < img->rows && x < img->cols)
	{
		current_point = points[y][x];
		// printf("x = %i\n", current_point.posx);
		// printf("y = %i\n", current_point.posy);
		if (y < img->rows)
		{
			algorithm(current_point, points[y + 1][x], img);
			y++;
		}
		if (y + 1 >= img->rows)
		{
			y = 0;
			x++;
		}
	}
}

void	draw_graph(t_position **points, t_data *img)
{
	t_position	current_point;
	int			x;
	int			y;
	
	x = 0;
	y = 0;
	current_point = points[y][x];
	while (y < img->rows)
	{
		x = 0;
		current_point = points[y][x];
		while (x < img->cols)
		{
			if (x + 1 < img->cols)
			{
				// printf("current_point[%i][%i] to points[%i][%i]\n", points[y][x].posx, points[y][x].posy, points[y][x + 1].posx, points[y][x + 1].posy);
				algorithm(current_point, points[y][x + 1], img);
			}
			if (y + 1 < img->rows)
			{
				// printf("current_point[%i][%i] to points[%i][%i]\n", points[y][x].posx, points[y][x].posy, points[y + 1][x].posx, points[y + 1][x].posy);
				algorithm(current_point, points[y + 1][x], img);
			}
			x++;
			current_point = points[y][x];
		}
		y++;
	}
}


**CHECK CONDITIONS AND REDIRECT**

void	check_conditions_and_redirect(int Pk, t_position point1, t_position point2, t_data *img)
{
	float	m;

	if (point1.posx == point2.posx && point1.posy > point2.posy)
	{
		draw_vert_line(point2.posy - point1.posy, point1.posx, point1.posy, img);
		return ;
	}
	else if (point1.posx == point2.posx && point1.posy < point2.posy)
	{
		draw_vert_line_reverse(point1.posy - point2.posy, point1.posx, point2.posx, img);
		return ;
	}
	m = (((point2.posy - point1.posy) * 1.0) / ((point2.posx - point1.posx) * 1.0));
	// printf("m = %f\n", m);
	if (m < 1 && m > 0 && point1.posx < point2.posx && point1.posy < point2.posy)
		algorithm_m_less_than_1_and_greater_than_0(Pk, point1, point2, img);
	else if (m >= 1 && point1.posx < point2.posx && point1.posy < point2.posy)
		algorithm_m_greater_than_or_equal_to_1(Pk, point1, point2, img);
	else if (m < 0 && m > -1 && point1.posx < point2.posx && point1.posy > point2.posy)
		algorithm_m_less_than_0_and_greater_than_minus1(Pk, point1, point2, img);
		// printf("enterting function\n");
	else if (m <= -1 && point1.posx < point2.posx && point1.posy > point2.posy)
		algorithm_m_less_than_or_equal_to_minus1(Pk, point1, point2, img);
	else if (m == 0 && point1.posx < point2.posx)
		draw_hor_line(point2.posx - point1.posx, point1.posx, point1.posy, img);
	else if (m == 0 && point1.posx > point2.posx)
		draw_hor_line_reverse(point1.posx - point2.posx, point1.posx, point1.posy, img);
	else if (m < 1 && m > 0 && point1.posx > point2.posx && point1.posy > point2.posy)
		algorithm_m_less_than_1_and_greater_than_0_reverse(Pk, point1, point2, img);
	else if (m >= 1 && point1.posx > point2.posx && point1.posy > point2.posy)
		algorithm_m_greater_than_or_equal_to_1_reverse(Pk, point1, point2, img);
	else if (m <= -1 && point1.posx > point2.posx && point1.posy < point2.posy)
		algorithm_m_less_than_or_equal_to_minus1_reverse(Pk, point1, point2, img);
	else if (m < 0 && m > -1 && point1.posx > point2.posx && point1.posy < point2.posy)
		algorithm_m_less_than_0_and_greater_than_minus1_reverse(Pk, point1, point2, img);
}








FDF_UTILS1 FILE

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fdf_utils1.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ooutabac <ooutabac@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/08/08 19:53:39 by ooutabac          #+#    #+#             */
/*   Updated: 2022/10/10 18:58:22 by ooutabac         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"

/* Draws a pixel
Used to draw a pixel on the window. An image must be already present to insert a
pixel to the window.
*/
void	my_mlx_pixel_put(t_data *img, int x, int y, int color)
{
	char	*dst;

	// x += img->screen_size_x / 5;
	// y += img->screen_size_y / 5;
	x += (find_center_point_x(img->screen_size_x) - ((img->cols * img->size) / 2) + img->hor);
	y += (find_center_point_y(img->screen_size_y) - ((img->rows * img->size) / 2) + img->vert);
	if (x > 0 && y > 0 && x < img->screen_size_x && y < img->screen_size_y)
	{
		dst = img->addr + (y * img->line_length + x * (img->bits_per_pixel / 8));
		*(unsigned int *)dst = color;
	}
}

/* Draw horizontal line
Draw a horizontal line. Keep increasing x variable till length
*/
void	draw_hor_line(int length, t_position point, t_data *img)
{
	int	i;

	i = 0;
	// printf("m == 0\n");
	while (i++ < length)
	{
		my_mlx_pixel_put(img, point.posx, point.posy, 0x00FFFFFF);
		point.posx++;
	}
}

void	draw_hor_line_reverse(int length, int x, int y, t_data *img)
{
	int	i;

	i = 0;
	// printf("m == 0\n");
	while (i++ < length)
	{
		my_mlx_pixel_put(img, x, y, 0x00FFFFFF);
		x--;
	}
}
/* Draws a square
length is the length of all sides of the square
*/

void	draw_vert_line(int length, int x, int y, t_data *img)
{
	int	i;

	i = 0;
	// printf("m is infinite\n");
	while (i++ < length)
	{
		my_mlx_pixel_put(img, x, y, 0x00FFFFFF);
		y++;
	}
}

void	draw_vert_line_reverse(int length, int x, int y, t_data *img)
{
	int	i;

	i = 0;
	// printf("m is infinite\n");
	while (i++ < length)
	{
		my_mlx_pixel_put(img, x, y--, 0x00FFFFFF);
		y--;
	}
}

void	draw_square(int length, int posx, int posy, t_data *img)
{
	int	i;
	int	x;
	int	y;

	i = 0;
	x = posx;
	y = posy;
	while (i++ < length)
		my_mlx_pixel_put(img, x++, y, 0x00FFFFFF);
	i = 0;
	while (i++ < length)
		my_mlx_pixel_put(img, x, y++, 0x00FFFFFF);
	i = 0;
	while (i++ < length)
		my_mlx_pixel_put(img, x--, y, 0x00FFFFFF);
	i = 0;
	while (i++ < length)
		my_mlx_pixel_put(img, x, y--, 0x00FFFFFF);
	return ;
}

void	fill_bucket(int color, int window_size_x, int window_size_y, t_data *img)
{
	int		i;
	t_position pixel;

	i = 0;
	pixel.posx = - 1;
	pixel.posy = - 1;
	while (pixel.posy++ < window_size_y - 2)
	{
		while (pixel.posx++ < window_size_x)
			my_mlx_pixel_put(img, pixel.posx, pixel.posy, color);
		pixel.posx = 0;
	}
}
// void	draw_circle(int radius, int posx, int posy, t_data *img)
// {
// 	int i;

// 	i = 0;
// 	while ()
// }

/* Creates a gradient color to a line or set of lines
It is done by making a starting color and increasing the gradient 
till ending_color is met
*/
// void	gradient_color(int starting_color, int ending_color, position pixel, t_data *img)
// {
// 	int	i;

// 	i = 0;
// 	while (starting_color != ending_color)
// 	{
// 		starting_color++;
// 	}
// }

// int	create_trgb(int t, int r, int g, int b)
// {
// 	return (t << 24 | r << 16 | g << 8 | b);
// }

// while ((img->cols * size) < img->screen_size_x && (img->rows * size) < img->screen_size_y && ((img->cols * img->rows * size) < (img->screen_size_x * img->screen_size_y * 0.75)))
// while (((img->cols * img->rows * size) < (img->screen_size_x * img->screen_size_y * 0.006)))
int	find_scale_size(t_data *img)
{
	while ((img->cols * img->size) < img->screen_size_x / 2 && (img->rows * img->size) < img->screen_size_y / 2)
		img->size++;
	// size--;
	// size *= 1.61803398875;
	printf("img->size = %i\n", img->size);
	return (img->size);
}

// t_position	**scale_img(t_position **points, t_data *img)
// {
// 	int	size;
// 	int	x;
// 	int	y;

// 	size = find_scale_size(img);
// 	y = 0;
// 	while (y < img->rows)
// 	{
// 		x = 0;
// 		while (x < img->cols)
// 		{
// 			points[y][x].posx *= size;
// 			points[y][x].posy *= size;
// 			points[y][x].posz *= size;
// 			x++;
// 		}
// 		y++;
// 	}
// 	return (points);
// }

















some lines in parsing function

	// constant = img_to_screen_ratio(data);



		// printf("row = %s", *row);














			// printf("%i  ", points[i][j].posz);
			// printf("y = %d\n", points[i][j].posx);
			// printf("x = %d\n", points[i][j].posy);
			// printf("z = %d\n", points[i][j].posz);


		// printf("\n");


	// free_everything(char_fdf_list, current_line, row );














I don't know what this is but just keep it here.. it from bresengham's algorithm file

// Not drawing diagonal lines properly. Search for fix.
// void	algorithm(t_position point1, t_position point2, t_data *img)
// {
// 	// t_position	**array;
// 	int			Pk;
// 	int			x;
// 	int			y;
// 	int			m;

// 	Pk = 2 * ((point2.posx - point1.posx) - (point2.posy - point1.posy));
// 	x = point1.posx;
// 	y = point1.posy;
// 	if (point1.posx == point2.posx)
// 	{
// 		printf("This is m = infinite\n");
// 		draw_vert_line(point2.posy - point1.posy, x, y, img);
// 		return;
// 	}
// 	m = ((point2.posy - point1.posy) / (point2.posx - point1.posx) * 1.0);
// 	// if (m == 0)
// 	// {
// 	// 	printf("This line is horizontal\n");
// 	//	x -= 2;
// 	//	y -= 2;
// 	// 	draw_hor_line(point2.posx - point1.posx, x, y, img);
// 	// }
// 	if (m < 1)
// 	{
// 		printf("This is m < 1 && m > 0\n");
// 		x -= 2;
// 		y -= 2;
// 		while (x <= point2.posx)
// 		{
// 			my_mlx_pixel_put(img, x, y, 0x00FFFFFF);
// 			x++;
// 			if (Pk < 0)
// 				Pk += 2 * (point2.posy - point1.posy);
// 			else if (Pk >= 0)
// 			{
// 				Pk += 2 * (point2.posy - point1.posy) - 2 * (point2.posx - point1.posx);
// 				y++;
// 			}
// 		}
// 	}
// 	else if (m >= 1)
// 	{
// 		printf("This is m >= 1\n");
// 		while (y <= point2.posy)
// 		{
// 			my_mlx_pixel_put(img, x, y, 0x00FFFFFF);
// 			y++;
// 			if (Pk < 0)
// 				Pk += 2 * (point2.posx - point1.posx);
// 			else if (Pk >= 0)
// 			{
// 				Pk += 2 * (point2.posx - point1.posx) - 2 * (point2.posy - point1.posy);
// 				x++;
// 			}
// 		}
// 	}
// }