ALGORITHM DECIDING WHAT LINE TO DRAW

	// if (point1.posx == point2.posx)
	// {
	// 	printf("This is m = infinite\n");
	// 	draw_vert_line(point2.posy - point1.posy, x, y, img);
	// 	return;
	// }
	// m = ((point2.posy - point1.posy) / (point2.posx - point1.posx) * 1.0);
	// if (m == 0)
	// {
	// 	printf("This line is horizontal\n");
	// 	draw_hor_line(point2.posx - point1.posx, x, y, img);
	// }
	// if (m < 1 && m > 0)
	// 	algorithm_m_less_than_1_and_greater_than_0(Pk, point1, point2, img);
	// if (m >= 1)
	// 	algorithm_m_greater_than_or_equal_to_1(Pk, point1, point2, img);
	// if (m < 0 && m > -1)
	// 	algorithm_m_less_than_0_and_greater_than_minus1(Pk, point1, point2, img);
	// if (m <= -1)
	// 	algorithm_m_less_than_or_equal_to_minus1(Pk, point1, point2, img);


	void	draw_graph(t_position **points, t_data *img)
{
	t_position	current_point;
	int	x;
	int	y;

	x = 0;
	y = 0;
	current_point.posx = points[x][y].posx;
	current_point.posy = points[x][y].posy;
	while (y < img->rows)
	{
		x = 0;
		current_point = points[y][x];
		while (x < img->cols)
		{
			// printf("x = %i\n", x);
			// printf("y = %i\n", y);
			if (x + 1 < img->cols && x + 1 != img->cols)
			{
				printf("point (%i,%i) to point (%i,%i)\n", x, y, x + 1, y);
				algorithm(current_point, points[y][x + 1], img);
			}
			else
				printf("end of row\n");
			if (y + 1 < img->rows && y + 1 != img->rows)
			{
				printf("point (%i,%i) to point (%i,%i)\n", x, y, x, y + 1);
				algorithm(current_point, points[y + 1][x], img);
			}
			else
				printf("end of column\n");
			// algorithm(points[x][y], points[x + 1][y + 1], img);
			// my_mlx_pixel_put(img, points[x][y].posx, points[x][y].posy, points[x][y].color);
			current_point = points[y][x];
			x++;
		}
		y++;
	}
}


			// else
				// printf("end of column\n");
			// algorithm(points[x][y], points[x + 1][y + 1], img);
			// my_mlx_pixel_put(img, points[x][y].posx, points[x][y].posy, points[x][y].color);
			// printf("point (%i,%i) to point (%i,%i)\n", current_point.posx, current_point.posy, points[y + 1][x].posx, points[y + 1][x].posy);
	// printf("Point1.posx = %i\nPoint1.posy = %i\nPoint2.posx = %i\nPoint2.posy = %i\nm = %f\n", point1.posx, point1.posy, point2.posx, point2.posy, m);

				// printf("point (%i,%i) to point (%i,%i)\n", current_point.posx, current_point.posy, points[y][x + 1].posx, points[y][x + 1].posy);

REMOVE USELESS FUNCTIONS
